name: Auto Update JSON Data

on:
  schedule:
    # Run every 2 hours to check time zones
    - cron: '0 */2 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  update-json:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Determine data source based on time zones
      id: determine_source
      run: |
        # Get current UTC time
        UTC_HOUR=$(date -u +%H)
        echo "UTC Hour: $UTC_HOUR"
        
        # Calculate Indian Standard Time (UTC+5:30)
        IST_HOUR=$(( (UTC_HOUR + 5) % 24 ))
        IST_MINUTE=$(date -u +%M)
        if [ $IST_MINUTE -ge 30 ]; then
          IST_HOUR=$(( (IST_HOUR + 1) % 24 ))
        fi
        echo "IST Hour: $IST_HOUR"
        
        # Calculate USA Eastern Time (UTC-5 in winter, UTC-4 in summer)
        # For simplicity, using UTC-5 (EST)
        EST_HOUR=$(( (UTC_HOUR - 5 + 24) % 24 ))
        echo "EST Hour: $EST_HOUR"
        
        # Determine data source
        # Indian time 6 AM to 8 PM (6-20) = FREE
        # USA time (EST) 9 AM to 9 PM (9-21) = PAID
        # Priority: If both conditions are true, Indian time takes precedence
        
        if [ $IST_HOUR -ge 6 ] && [ $IST_HOUR -le 20 ]; then
          DATA_SOURCE="free"
          REASON="Indian time (${IST_HOUR}:XX IST) - Morning to Evening"
        elif [ $EST_HOUR -ge 9 ] && [ $EST_HOUR -le 21 ]; then
          DATA_SOURCE="paid"
          REASON="USA time (${EST_HOUR}:XX EST) - Business Hours"
        else
          DATA_SOURCE="free"
          REASON="Off-peak hours - Default to free"
        fi
        
        echo "Selected data source: $DATA_SOURCE"
        echo "Reason: $REASON"
        echo "data_source=$DATA_SOURCE" >> $GITHUB_OUTPUT
        echo "reason=$REASON" >> $GITHUB_OUTPUT
    
    - name: Check current data source
      id: check_current
      run: |
        CURRENT_SOURCE=$(grep 'DATA_SOURCE = ' update_hello.py | sed 's/.*DATA_SOURCE = "\([^"]*\)".*/\1/')
        echo "Current data source: $CURRENT_SOURCE"
        echo "current_source=$CURRENT_SOURCE" >> $GITHUB_OUTPUT
    
    - name: Update data source if needed
      if: steps.check_current.outputs.current_source != steps.determine_source.outputs.data_source
      run: |
        echo "🔄 Updating data source from ${{ steps.check_current.outputs.current_source }} to ${{ steps.determine_source.outputs.data_source }}"
        echo "Reason: ${{ steps.determine_source.outputs.reason }}"
        
        # Update the DATA_SOURCE in the Python file
        sed -i 's/DATA_SOURCE = "[^"]*"/DATA_SOURCE = "${{ steps.determine_source.outputs.data_source }}"/' update_hello.py
        
        # Verify the change
        echo "Updated line:"
        grep 'DATA_SOURCE = ' update_hello.py
    
    - name: Run JSON update script
      if: steps.check_current.outputs.current_source != steps.determine_source.outputs.data_source
      run: |
        echo "🚀 Running update script..."
        python3 update_hello.py
        
        # Check if hello.json was updated
        if [ -f hello.json ]; then
          echo "✅ hello.json updated successfully"
          echo "File size: $(du -h hello.json | cut -f1)"
        else
          echo "❌ hello.json not found"
          exit 1
        fi
    
    - name: Clean up backup files
      if: steps.check_current.outputs.current_source != steps.determine_source.outputs.data_source
      run: |
        # Remove backup files to keep repo clean
        rm -f *.backup
        echo "🗑️ Cleaned up backup files"
    
    - name: Commit and push changes
      if: steps.check_current.outputs.current_source != steps.determine_source.outputs.data_source
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add update_hello.py hello.json
        git commit -m "🤖 Auto-update: Switch to ${{ steps.determine_source.outputs.data_source }} data
        
        ${{ steps.determine_source.outputs.reason }}
        
        Updated at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        git push
        
        echo "✅ Changes committed and pushed"
    
    - name: No update needed
      if: steps.check_current.outputs.current_source == steps.determine_source.outputs.data_source
      run: |
        echo "ℹ️ No update needed - already using ${{ steps.determine_source.outputs.data_source }} data"
        echo "Reason: ${{ steps.determine_source.outputs.reason }}"
    
    - name: Summary
      run: |
        echo "## 📊 Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Data Source**: ${{ steps.determine_source.outputs.data_source }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Current Data Source**: ${{ steps.check_current.outputs.current_source }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Reason**: ${{ steps.determine_source.outputs.reason }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.check_current.outputs.current_source }}" != "${{ steps.determine_source.outputs.data_source }}" ]; then
          echo "- **Action**: Updated and committed changes ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Action**: No update needed ℹ️" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY 